name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_on_mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: 22
      - run: |
          yarn cache clean
          yarn config delete proxy
          yarn config delete https-proxy
          yarn config delete registry
          yarn install --network-timeout 1000000
          yarn remove win-protect

      - run: yarn build:mac
      - uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            dist/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_on_win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: 22
      - run: |
          yarn cache clean
          yarn config delete proxy
          yarn config delete https-proxy
          yarn config delete registry
          yarn install --network-timeout 1000000
          yarn remove win-protect

      - run: yarn build:win
      - uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    runs-on: ubuntu-latest
    needs: [build_on_mac, build_on_win]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && 'develop' || github.ref }}
      - name: Setup node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'yarn'
      - name: Get current version
        id: version
        run: |
          set -e
          current_version=$(node -p "require('./package.json').version" || { echo "Error: Failed to retrieve current version from package.json"; exit 1; })
          echo "Current version: $current_version"
          
          # Calculate new version based on tag
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            new_version="${GITHUB_REF#refs/tags/v}"
          else
            echo "No valid tag found, using current version."
            new_version="$current_version"
          fi
          
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
